generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int          @id @default(autoincrement())
  username             String?      @unique
  kakao_id             BigInt?      @unique
  avatar               String?
  country              String       @default("ko-KR")
  rank_basic           Int?
  rank_recital         Int?
  rank_basic_country   Int?
  rank_recital_country Int?
  play_count           Int?
  score_p              Int?
  score_s              Int?
  score_a2             Int?
  score_a              Int?
  score_b2             Int?
  grade_basic          Int?
  grade_recital        Int?
  created_at           DateTime     @default(now())
  updated_at           DateTime     @updatedAt
  PlayHistory          RecentPlay[]
  PlayData             PlayData[]
}

model Music {
  id             Int          @id @default(autoincrement())
  index          String       @unique
  title          String
  title_kana     String
  artist         String?
  category       String
  category_short String
  description    String?
  background     String?
  sheet_len      Int
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
  RecentPlay     RecentPlay[]
  PlayData       PlayData[]
}

model RecentPlay {
  id         Int      @id @default(autoincrement())
  difficulty String
  level      Int
  score      Int
  max_combo  Int
  rank       String
  play_time  String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user_id    Int
  user       User     @relation(fields: [user_id], references: [id])
  music_idx  String
  music      Music    @relation(fields: [music_idx], references: [index])
}

model PlayData {
  id              Int      @id @default(autoincrement())
  level           Int
  difficulty      String
  score           Int
  rank            String
  fc_type         Int
  play_count      Int
  fullcombo_count Int
  pianistic_count Int
  max_combo       Int
  grade_basic     Int
  grade_recital   Int
  besttime        String
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  user_id         Int
  user            User     @relation(fields: [user_id], references: [id])
  music_idx       String
  music           Music    @relation(fields: [music_idx], references: [index])
}
